@page "/folder/add"
@using Application.Folders.Queries.GetAvailableFolders
@inject MediatR.IMediator _mediator

<h3>Add new folder</h3>

<form class="folder-add-form">
    <div class="form-group">
        <input type="radio" class="form-check-input" id="create" name="creationOption" value="create" 
               @onchange="@(()=> selectedFolderCreationOption = FolderCreationOption.CreateNew)"
               checked="@(selectedFolderCreationOption == FolderCreationOption.CreateNew)" 
               />
        <label for="create">Create:</label>
        <input type="text" class="form-text" placeholder="folder name" 
               @bind="selectedFolder"
               disabled="@(selectedFolderCreationOption != FolderCreationOption.CreateNew)" />
    </div>

    <div class="form-group">
        <input type="radio" class="form-check-input" id="select" name="creationOption" value="select"
               @onchange="@(()=> selectedFolderCreationOption = FolderCreationOption.SelectExisting)"
               checked="@(selectedFolderCreationOption == FolderCreationOption.SelectExisting)" />
        <label for="select">Select:</label>
        <select class="form-control" @bind="selectedFolder"
                disabled="@(selectedFolderCreationOption != FolderCreationOption.SelectExisting)">
            <option></option>
            @foreach (var folder in availableFolders)
            {
                <option value="@folder.Name">@folder.Name</option>
            }
        </select>
    </div>
    <div class="folder-options">
        <h4>Options</h4>
        <div class="form-group">
            <input type="checkbox" class="" id="deleteAfterSend" />
            <label for="deleteAfterSend">Delete after send</label>
        </div>
        <div class="form-group">
            <label for="recipients">Recipients:</label>
           <CheckBoxListView CheckItems="" />
        </div>
    </div>

    <input type="button" class="btn btn-primary btn-save-folder"
           @onclick="CreateNewFolder"
           value="Save" />
</form>

@code {

    List<AvailableFolderDto> availableFolders = new List<AvailableFolderDto>();
    string selectedFolder;
    FolderCreationOption selectedFolderCreationOption = FolderCreationOption.CreateNew;

    List<CheckItem<Domain.Recipient>> recipients = new List<CheckItem<Domain.Recipient>>();

    protected override async Task OnInitializedAsync()
    {
        var vm = await _mediator.Send(new GetAvailableFoldersQuery());
        availableFolders = vm.Folders;
    }

    async Task CreateNewFolder()
    {
        //await _mediator.Send();
    }

    public enum FolderCreationOption
    {
        CreateNew = 0,
        SelectExisting = 1
    }
}
