@page "/folder/add"
@using Application.Folders.Queries.GetAvailableFolders
@using Application.Folders.Commands.AddNewFolder
@using Application.Recipients.Queries.GetRecipientList
@inject MediatR.IMediator _mediator

<h3>Add new folder</h3>

<form class="folder-add-form">
    @if (validationMessages.Any())
    {
    <div class="validation-summary">
        <ul>
            @foreach (var message in validationMessages)
            {
                <li>@message</li>
            }
        </ul>
    </div>
    }
    <div class="form-group">
        <input type="radio" class="form-check-input" id="create" name="creationOption" value="create"
               @onchange="@(()=> selectedFolderCreationOption = FolderCreationOption.CreateNew)"
               checked="@(selectedFolderCreationOption == FolderCreationOption.CreateNew)" />
        <label for="create">Create:</label>
        <input type="text" class="form-text" placeholder="folder name"
               @bind="selectedFolder"
               disabled="@(selectedFolderCreationOption != FolderCreationOption.CreateNew)" />
    </div>

    <div class="form-group">
        <input type="radio" class="form-check-input" id="select" name="creationOption" value="select"
               @onchange="@(()=> selectedFolderCreationOption = FolderCreationOption.SelectExisting)"
               checked="@(selectedFolderCreationOption == FolderCreationOption.SelectExisting)" />
        <label for="select">Select:</label>
        <select class="form-control" @bind="selectedFolder"
                disabled="@(selectedFolderCreationOption != FolderCreationOption.SelectExisting)">
            <option></option>
            @foreach (var folder in availableFolders)
            {
                <option value="@folder.Name">@folder.Name</option>
            }
        </select>
    </div>
    <div class="folder-options">
        <h4>Options</h4>
        <div class="form-group">
            <input type="checkbox" id="deleteAfterSend" @bind="deleteAfterSend" />
            <label for="deleteAfterSend">Delete after send</label>
        </div>
        <div class="form-group">
            <label for="recipients">Recipients:</label>
            <CheckBoxListView CheckItems="recipients" />
        </div>
    </div>

    <input type="button" class="btn btn-primary btn-save-folder"
           @onclick="CreateNewFolder"
           value="Save" />
</form>

@code {

            List<AvailableFolderDto> availableFolders = new List<AvailableFolderDto>();
            string selectedFolder;
            FolderCreationOption selectedFolderCreationOption = FolderCreationOption.CreateNew;
            bool deleteAfterSend = false;
            List<CheckItem<Domain.Recipient>> recipients = new List<CheckItem<Domain.Recipient>>();
            List<string> validationMessages = new List<string>();

            protected override async Task OnInitializedAsync()
            {
                var foldersVm = await _mediator.Send(new GetAvailableFoldersQuery());
                availableFolders = foldersVm.Folders;
                var recipientsVm = await _mediator.Send(new GetRecipientListQuery());
                recipients = recipientsVm.Recipients.Select(x => new CheckItem<Domain.Recipient> { Data = x, DisplayText = x.Name }).ToList();
            }

            async Task CreateNewFolder()
            {
                var command = new AddNewFolderCommand
                {
                    Name = selectedFolder,
                    DeleteAfterSend = deleteAfterSend,
                    Recipients = recipients.Where(x => x.IsChecked).Select(x => x.Data).ToList(),
                    CreateOnDisk = selectedFolderCreationOption == FolderCreationOption.CreateNew
            };
        try
        {
            await _mediator.Send(command);
        }
        catch (ValidationException ex)
        {
            validationMessages = ex.Errors.Select(x => x.ErrorMessage).ToList();
    }
    }

    public enum FolderCreationOption
    {
        CreateNew = 0,
        SelectExisting = 1
    }
}
